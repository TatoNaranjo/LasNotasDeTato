/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const DEFAULT_SETTINGS = {
    numOfVocabularyBooks: 0,
    vocabularyBookPaths: [""],
};
var VocabularyBookPathStatus;
(function (VocabularyBookPathStatus) {
    VocabularyBookPathStatus[VocabularyBookPathStatus["INVALID"] = 0] = "INVALID";
    VocabularyBookPathStatus[VocabularyBookPathStatus["DOES_NOT_EXIST"] = 1] = "DOES_NOT_EXIST";
    VocabularyBookPathStatus[VocabularyBookPathStatus["EXISTS"] = 2] = "EXISTS";
})(VocabularyBookPathStatus || (VocabularyBookPathStatus = {}));
class VocabularyViewSettingTab extends obsidian.PluginSettingTab {
    // vocabularyBookAddedCallback: (path: string) => Promise<void>;
    // vocabularyBookRemovedCallback: (path: string) => Promise<void>;
    constructor(app, plugin) {
        super(app, plugin);
        this.defaultDescription = `The path of the vocabulary book, choose an empty .md file or create a new one to be used as the vocabulary book.
        You can either manually enter the relative path to the file,
        or right-click on the file in Obsidian, select 'Copy Obsidian URL', and paste it here.`;
        this.defaultSettingName = "Book";
        this.plugin = plugin;
    }
    onSettingsChanged(callback) {
        this.settingsChangedCallback = callback;
    }
    // onVocabularyBookAdded(callback: (path: string) => Promise<void>): void {
    //     this.vocabularyBookAddedCallback = callback;
    // }
    //
    // onVocabularyBookRemoved(callback: (path: string) => Promise<void>): void {
    //     this.vocabularyBookRemovedCallback = callback;
    // }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        // containerEl.createEl("h2", {text: "Settings for Vocabulary View"});
        // create setting for the number of vocabulary books
        new obsidian.Setting(containerEl)
            .setName("Number of Vocabulary Books")
            .setDesc("The number of vocabulary books to be used.")
            .addText(text => text
            .setPlaceholder("1")
            .setValue(this.plugin.settings.numOfVocabularyBooks.toString())
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            let num = parseInt(value);
            if (isNaN(num)) {
                num = 1;
            }
            this.plugin.settings.numOfVocabularyBooks = num;
            this.display();
            yield this.plugin.saveSettings();
        })));
        // create setting for the vocabulary book path
        for (let i = 0; i < this.plugin.settings.numOfVocabularyBooks; i++) {
            this.createSetting(containerEl, i);
        }
        this.settingsChangedCallback();
    }
    createSetting(containerEl, i) {
        let temporarilyDisableOnChange = false;
        let settingName = this.defaultSettingName + " " + (i + 1);
        let st = new obsidian.Setting(containerEl)
            .setName(settingName + " (" + this.plugin.settings.vocabularyBookPaths[i] + ")")
            .setDesc(this.defaultDescription)
            .addText(text => text
            .setPlaceholder("relative path or obsidian url")
            .setValue(this.plugin.settings.vocabularyBookPaths[i])
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (temporarilyDisableOnChange) {
                return;
            }
            this.plugin.settings.vocabularyBookPaths[i] = "";
            if (value === "") {
                st.setName(this.defaultSettingName);
            }
            else {
                const fs = this.app.vault.adapter;
                let formattedPath = VocabularyViewSettingTab.formatPath(value);
                let fileStatus = yield VocabularyViewSettingTab.checkPath(formattedPath, fs);
                if (fileStatus === VocabularyBookPathStatus.INVALID) {
                    st.setName(settingName + " (Invalid Path)");
                }
                else if (fileStatus === VocabularyBookPathStatus.DOES_NOT_EXIST) {
                    st.setName(settingName + " (File Does Not Exist)");
                }
                else {
                    st.setName(settingName + " (" + formattedPath + ")");
                    temporarilyDisableOnChange = true;
                    this.plugin.settings.vocabularyBookPaths[i] = formattedPath;
                    // text.setValue(this.plugin.settings.vocabularyBookPath);
                    // await this.vocabularyBookAddedCallback(formattedPath);
                    temporarilyDisableOnChange = false;
                }
            }
            yield this.settingsChangedCallback();
            yield this.plugin.saveSettings();
        })));
    }
    /**
     * Check if the input path is a relative path ending with .md.
     * @param input
     */
    static isRelativePath(input) {
        // regular expression for relative paths
        const relativePathRegex = /^[^:*?"<>|\r\n]+(\.[^:*?"<>|\r\n]+)*\.md$/;
        return relativePathRegex.test(input);
    }
    static isObsidianLink(input) {
        // regular expression for Obsidian links
        const obsidianLinkRegex = /^obsidian:\/\/open\?vault=[^&]+&file=([^&]+)$/;
        return obsidianLinkRegex.test(input);
    }
    static convertObsidianLinkToRelativePath(input) {
        // regular expression for Obsidian links
        const obsidianLinkRegex = /^obsidian:\/\/open\?vault=[^&]+&file=([^&]+)$/;
        // Check if the input string is an Obsidian link
        const obsidianMatch = input.match(obsidianLinkRegex);
        if (obsidianMatch) {
            // Decode the Obsidian link and replace '%2F' with '/'
            const filePath = decodeURIComponent(obsidianMatch[1]).replace(/%2F/g, '/');
            return filePath; // Return the converted relative path
        }
        // If it doesn't match the Obsidian link format, return an empty string
        return '';
    }
    /**
     * Format the input path to a relative path with the .md extension.
     * @param path
     */
    static formatPath(path) {
        if (path === "") {
            return "";
        }
        let formattedPath = path;
        if (VocabularyViewSettingTab.isObsidianLink(path)) {
            formattedPath = VocabularyViewSettingTab.convertObsidianLinkToRelativePath(path);
        }
        // add .md extension if it doesn't exist
        if (!formattedPath.endsWith(".md")) {
            formattedPath += ".md";
        }
        if (!VocabularyViewSettingTab.isRelativePath(formattedPath)) {
            return "";
        }
        return formattedPath;
    }
    /**
     * Check the input path, and return the description string.
     * @param path
     * @param fs
     */
    static checkPath(path, fs) {
        return __awaiter(this, void 0, void 0, function* () {
            if (VocabularyViewSettingTab.isRelativePath(path)) {
                // const fs = this.app.vault.adapter as FileSystemAdapter;
                let fileExists = yield fs.exists(path);
                if (fileExists) {
                    return VocabularyBookPathStatus.EXISTS;
                }
                else {
                    return VocabularyBookPathStatus.DOES_NOT_EXIST;
                }
            }
            else {
                return VocabularyBookPathStatus.INVALID;
            }
        });
    }
}

var _a;
class Word {
    constructor(word, explanation) {
        this.word = word;
        this.explanation = explanation;
    }
}
class Words {
    constructor(src, separator) {
        this.words = [];
        this.length = 0;
        this[_a] = () => {
            return new WordsIterator(this);
        };
        const lines = src.split('\n');
        lines.forEach(value => {
            const separatorPos = value.indexOf(separator);
            if (separatorPos === -1 || value.length <= separatorPos + 1)
                return;
            const word = value.slice(0, separatorPos).trim();
            const explanation = value.slice(separatorPos + 1).trim();
            this.words.push(new Word(word, explanation));
            this.length = this.words.length;
        });
        this.getRandomWords = (num) => {
            let retArr = [];
            let indexArr = Array.from(Array(this.length).keys());
            shuffle(indexArr);
            for (let i = 0; i < num; ++i) {
                retArr.push(this.words[indexArr[i]]);
            }
            return retArr;
        };
        this.getRandomWord = () => {
            return this.words[Math.floor(Math.random() * this.length)];
        };
    }
}
_a = Symbol.iterator;
class WordsIterator {
    constructor(words) {
        this.wordsArr = words.words;
        this.nextIndex = 0;
        this.next = () => {
            if (this.nextIndex >= this.wordsArr.length)
                return { value: new Word('', ''), done: true };
            return { value: this.wordsArr[this.nextIndex++], done: false };
        };
    }
}
function shuffle(arr) {
    for (let i = 0; i < arr.length; ++i) {
        const r = Math.floor(Math.random() * arr.length);
        let temp = arr[i];
        arr[i] = arr[r];
        arr[r] = temp;
    }
}

class VocabularyBook {
    constructor(app, path) {
        this.vocabularyBookPath = path;
        this.vocabularyBookName = extractNameFromPath(path);
        this.cache = new Map();
        this.app = app;
    }
    // public static getInstance(path: string): VocabularyBook {
    //     if (!VocabularyBook.instance) {
    //         VocabularyBook.instance = new VocabularyBook(path);
    //     }
    //     VocabularyBook.instance.vocabularyBookPath = path;
    //     return VocabularyBook.instance;
    // }
    addWord(word) {
        return __awaiter(this, void 0, void 0, function* () {
            this.cache.set(word.word, word);
            yield this.saveWordsFromCacheToDisk();
        });
    }
    removeWord(word) {
        return __awaiter(this, void 0, void 0, function* () {
            this.cache.delete(word.word);
            yield this.saveWordsFromCacheToDisk();
        });
    }
    hasWord(word) {
        return this.cache.has(word);
    }
    loadWordsFromDiskToCache() {
        return __awaiter(this, void 0, void 0, function* () {
            const fs = this.app.vault.adapter;
            let rawFileContent = yield fs.read(this.vocabularyBookPath);
            // extract the first vocaview block
            const regex = /```vocaview-[\w]+\n([\s\S]*?)\n```/;
            let match = regex.exec(rawFileContent);
            if (match) {
                // remove the first and last line of the vocaview block, keeping only the words and explanations
                let words_and_explanations = match[0].split('\n');
                words_and_explanations.shift();
                words_and_explanations.pop();
                // regroup the remaining lines to a single string
                let words_and_explanations_str = words_and_explanations.join('\n');
                // use the Words class to parse the string
                const words = new Words(words_and_explanations_str, ':');
                // store the words in the cache
                this.cache.clear();
                for (const word of words) {
                    this.cache.set(word.word, word);
                }
            }
        });
    }
    saveWordsFromCacheToDisk() {
        return __awaiter(this, void 0, void 0, function* () {
            const fs = this.app.vault.adapter;
            let sourceFileContent = yield fs.read(this.vocabularyBookPath);
            // extract the first vocaview block
            const regex = /```vocaview-[\w]+\n([\s\S]*?)\n```/;
            let match = regex.exec(sourceFileContent);
            if (match) {
                // generate the new vocaview block content
                let newVocaviewBlockContent = '';
                for (const word of this.cache.values()) {
                    newVocaviewBlockContent += `${word.word}: ${word.explanation}\n`;
                }
                // replace the old vocaview block with the new one
                sourceFileContent = sourceFileContent.replace(match[0], `${match[0].slice(0, match[0].indexOf('\n'))}\n${newVocaviewBlockContent.trim()}\n\`\`\``);
            }
            else {
                // no vocaview block found, create a new one
                let newVocaviewBlockContent = '';
                for (const word of this.cache.values()) {
                    newVocaviewBlockContent += `${word.word}: ${word.explanation}\n`;
                }
                sourceFileContent += `\n\`\`\`vocaview-list1\n${newVocaviewBlockContent.trim()}\n\`\`\``;
            }
            // write the modified file content back to the disk
            yield fs.write(this.vocabularyBookPath, sourceFileContent);
        });
    }
    printCache() {
        console.log(this.vocabularyBookName + " (" + this.vocabularyBookPath + "):");
        console.log(this.cache);
    }
    getVocabularyBookName() {
        return this.vocabularyBookName;
    }
    getVocabularyBookPath() {
        return this.vocabularyBookPath;
    }
}
function extractNameFromPath(path) {
    if (typeof path === 'undefined') {
        return '';
    }
    const pathComponents = path.split('/');
    const lastComponent = pathComponents[pathComponents.length - 1];
    const name = lastComponent.split('.')[0];
    return name;
}

class VocabularyView extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        // Map: vocabulary book name -> vocabulary book object
        this.vocabularyBooks = new Map();
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            // load settings
            yield this.loadSettings();
            // create settings tab
            let settingsTab = new VocabularyViewSettingTab(this.app, this);
            settingsTab.onSettingsChanged(() => __awaiter(this, void 0, void 0, function* () {
                yield this.syncVocabularyBooksWithSettings();
            }));
            // settingsTab.onVocabularyBookAdded(async (path: string) => {
            //     let vocabularyBook = new VocabularyBook(this.app, path);
            //     this.vocabularyBooks.set(vocabularyBook.getVocabularyBookName(), vocabularyBook);
            //     // console.log(`Vocabulary book ${vocabularyBook.getVocabularyBookName()} has been added.`);
            //     console.log(this.vocabularyBooks);
            //     await vocabularyBook.loadWordsFromDiskToCache();
            // })
            this.addSettingTab(settingsTab);
            // register Markdown code block processors
            this.registerMarkdownCodeBlockProcessor("vocaview-list1", (source, el, ctx) => {
                renderBlockTypeList(1, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-list2", (source, el, ctx) => {
                renderBlockTypeList(2, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-list3", (source, el, ctx) => {
                renderBlockTypeList(3, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-choice1", (source, el, ctx) => {
                renderBlockTypeChoice(1, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-choice2", (source, el, ctx) => {
                renderBlockTypeChoice(2, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-choice3", (source, el, ctx) => {
                renderBlockTypeChoice(3, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-card1", (source, el, ctx) => {
                renderBlockTypeCard(1, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-card2", (source, el, ctx) => {
                renderBlockTypeCard(2, source, el, ctx, this);
            });
            this.registerMarkdownCodeBlockProcessor("vocaview-card3", (source, el, ctx) => {
                renderBlockTypeCard(3, source, el, ctx, this);
            });
            // make sure the vocabularyBookPaths array has enough length
            if (this.settings.vocabularyBookPaths.length < this.settings.numOfVocabularyBooks) {
                // append empty paths to match the length to the number of vocabulary books
                for (let i = this.settings.vocabularyBookPaths.length; i < this.settings.numOfVocabularyBooks; i++) {
                    this.settings.vocabularyBookPaths.push("");
                }
            }
            // load vocabulary books
            this.vocabularyBooks.clear();
            for (let i = 0; i < this.settings.numOfVocabularyBooks; i++) {
                // this.settings.vocabularyBookPaths may contain more paths than this.settings.numOfVocabularyBooks
                let path = this.settings.vocabularyBookPaths[i];
                let vocabularyBook = new VocabularyBook(this.app, path);
                this.vocabularyBooks.set(vocabularyBook.getVocabularyBookName(), vocabularyBook);
                yield vocabularyBook.loadWordsFromDiskToCache();
            }
        });
    }
    syncVocabularyBooksWithSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            // create a set of all paths visible in the settings tab
            // do not use new set(this.settings.vocabularyBookPaths) directly
            // because this.settings.vocabularyBookPaths may contain more paths than this.settings.numOfVocabularyBooks
            let allPaths = new Set();
            for (let i = 0; i < this.settings.numOfVocabularyBooks; i++) {
                allPaths.add(this.settings.vocabularyBookPaths[i]);
            }
            // if a book exists only in the map, remove it
            for (const [name, book] of this.vocabularyBooks) {
                if (!allPaths.has(book.getVocabularyBookPath())) {
                    this.vocabularyBooks.delete(name);
                    // console.log(`Vocabulary book ${name} has been removed.`);
                    // console.log(this.vocabularyBooks);
                }
            }
            // if a book exists only in the settings, add it
            for (const path of allPaths) {
                const bookName = extractNameFromPath(path);
                if (!this.vocabularyBooks.has(bookName)) {
                    const fs = this.app.vault.adapter;
                    let fileStatus = yield VocabularyViewSettingTab.checkPath(path, fs);
                    if (fileStatus === VocabularyBookPathStatus.EXISTS) {
                        let vocabularyBook = new VocabularyBook(this.app, path);
                        this.vocabularyBooks.set(vocabularyBook.getVocabularyBookName(), vocabularyBook);
                        // console.log(`Vocabulary book ${bookName} has been added.`);
                        // console.log(this.vocabularyBooks);
                        yield vocabularyBook.loadWordsFromDiskToCache();
                    }
                }
            }
        });
    }
}
const localedTexts = {
    showHideAllBtn: {
        "zh-cn": "显示/隐藏全部",
        "zh-tw": "顯示/隱藏全部",
        "en": "Show/Hide All",
        "ja": "すべてを表示/隠す"
    },
    accuracy: {
        "zh-cn": "正确率",
        "zh-tw": "正確率",
        "en": "Accuracy",
        "ja": "正解率"
    },
    nextBtn: {
        "zh-cn": "下一个",
        "zh-tw": "下一個",
        "en": "Next",
        "ja": "次"
    }
};
class numberObj {
    constructor(num) {
        this.num = 0;
        this.num = num;
        this.increase = () => {
            num += 1;
        };
        this.decrease = () => {
            num -= 1;
        };
        this.get = () => {
            return num;
        };
        this.isZero = () => {
            return num === 0;
        };
    }
}
class booleanObj {
    constructor(bool) {
        this.bool = false;
        this.bool = bool;
        this.set = () => {
            this.bool = true;
        };
        this.clear = () => {
            this.bool = false;
        };
        this.get = () => {
            return this.bool;
        };
    }
}
function divIsHidden(div) {
    return div.hasClass("hidden");
}
function divSetHidden(div, hiddenCounter) {
    if (divIsHidden(div))
        return;
    div.addClass("hidden");
    hiddenCounter === null || hiddenCounter === void 0 ? void 0 : hiddenCounter.increase();
}
function divClearHidden(div, hiddenCounter) {
    if (divIsHidden(div)) {
        div.removeClass("hidden");
        hiddenCounter === null || hiddenCounter === void 0 ? void 0 : hiddenCounter.decrease();
    }
}
function divToggleHidden(div, hiddenCounter) {
    if (divIsHidden(div))
        divClearHidden(div, hiddenCounter);
    else
        divSetHidden(div, hiddenCounter);
}
function createOneSelectableItem(parentEl) {
    return parentEl.createEl("li", { cls: "selectable-item" });
}
function fillSelectableItemWithWord(subtype, selectableItemEl, word) {
    let upperEl, lowerEl;
    switch (subtype) {
        default:
        case 1:
            upperEl = selectableItemEl.createDiv({
                cls: "upper",
                text: word.word
            });
            // initially hide all explanations
            lowerEl = selectableItemEl.createDiv({ cls: ["lower", "hidden"] });
            lowerEl.createSpan({ text: word.explanation });
            break;
        case 2:
            upperEl = selectableItemEl.createDiv({
                cls: "upper",
                text: word.explanation
            });
            // initially hide all explanations
            lowerEl = selectableItemEl.createDiv({ cls: ["lower", "hidden"] });
            lowerEl.createSpan({ text: word.word });
            break;
        case 3:
            const boolVar = Math.random() > 0.5;
            upperEl = selectableItemEl.createDiv({
                cls: "upper",
                text: boolVar ? word.word : word.explanation
            });
            // initially hide all explanations
            lowerEl = selectableItemEl.createDiv({ cls: ["lower", "hidden"] });
            lowerEl.createSpan({ text: boolVar ? word.explanation : word.word });
        // break;
    }
    return [upperEl, lowerEl];
}
function createAddToVocBookButtons(plugin, word) {
    let updateBtnTextAndStyle = (book, word, btnEl) => {
        if (book.hasWord(word.word)) {
            btnEl.innerText = "-" + book.getVocabularyBookName();
            btnEl.toggleClass("added", true);
        }
        else {
            btnEl.innerText = "+" + book.getVocabularyBookName();
            btnEl.toggleClass("added", false);
        }
    };
    // let vocbookButtonDivEl = parentEl.createDiv({cls: "vocbook-button-list"});
    let vocbookButtonDivEl = document.createElement("div");
    vocbookButtonDivEl.className = "vocbook-button-list";
    for (const [name, book] of plugin.vocabularyBooks) {
        let vocbookButtonEl = vocbookButtonDivEl.createEl("button", {
            cls: "vocbook-button",
            text: ""
        });
        updateBtnTextAndStyle(book, word, vocbookButtonEl);
        vocbookButtonEl.addEventListener("click", (event) => __awaiter(this, void 0, void 0, function* () {
            event.stopPropagation(); // prevent the click event from propagating to the parent element
            if (book.hasWord(word.word))
                yield book.removeWord(word);
            else
                yield book.addWord(word);
            updateBtnTextAndStyle(book, word, vocbookButtonEl);
            // console.log("ctx.docID: " + ctx.docId);
            // console.log("ctx.sourcePath: " + ctx.sourcePath);
        }));
    }
    return vocbookButtonDivEl;
}
function renderBlockTypeList(subtype, source, el, ctx, plugin) {
    var _a;
    const words = new Words(source, ':');
    if (words.length < 1)
        return;
    let blockEl = el.createDiv({ cls: "vocaview-block" });
    let listEl = blockEl.createEl("ul", { cls: "word-list" });
    let lowerElArr = [];
    let numOfHidden = new numberObj(0);
    let currentFileIsVocabularyBook = isCurrentFileVocabularyBook(ctx, plugin);
    // create word list
    for (const word of words) {
        let listItemEl = createOneSelectableItem(listEl);
        // create "Add to vocabulary book" buttons if current .md file is not itself a vocabulary book
        if (plugin.settings.numOfVocabularyBooks > 0 && !currentFileIsVocabularyBook) {
            let buttonsEl = createAddToVocBookButtons(plugin, word);
            listItemEl.appendChild(buttonsEl);
        }
        let [upperEl, lowerEl] = fillSelectableItemWithWord(subtype, listItemEl, word);
        numOfHidden.increase();
        listItemEl.addEventListener("click", () => {
            divToggleHidden(lowerEl, numOfHidden);
        });
        // cache explanation html elements for later use
        lowerElArr.push(lowerEl);
    }
    if (lowerElArr.length < 1)
        return;
    // create "show/hide all" button
    let bottomBarEl = blockEl.createDiv({ cls: "bottom-bar" });
    let showHideAllBtnEl = bottomBarEl.createEl("button", {
        cls: "show-hide-button",
        text: (_a = localedTexts.showHideAllBtn[obsidian.moment.locale()]) !== null && _a !== void 0 ? _a : localedTexts.showHideAllBtn["en"]
    });
    showHideAllBtnEl.addEventListener("click", () => {
        // if the visibility of all explanations is not unified
        // we just unify them into the majority
        const n = numOfHidden.get();
        if (n > 0 && n < lowerElArr.length) {
            const unifyAsHidden = (n >= lowerElArr.length / 2);
            if (unifyAsHidden)
                lowerElArr.forEach((div) => {
                    divSetHidden(div, numOfHidden);
                });
            else
                lowerElArr.forEach((div) => {
                    divClearHidden(div, numOfHidden);
                });
            return;
        }
        // if the visibility of all explanations is already unified
        // toggle it
        lowerElArr.forEach((div) => {
            divToggleHidden(div, numOfHidden);
        });
    });
}
/**
 * Get a random question and options from the given words
 * @param subtype 1: word -> explanation, 2: explanation -> word, 3: random
 * @param words Words object
 * @param numOfOptions number of options
 * @returns [word, question, options] where question is a string equal to word.word or word.explanation
 */
function getRandomQuestionAndOptions(subtype, words, numOfOptions) {
    numOfOptions = words.length < numOfOptions ? words.length : numOfOptions;
    const wordArr = words.getRandomWords(numOfOptions);
    let question = "";
    let options = [];
    switch (subtype) {
        default:
        case 1:
            question = wordArr[0].word;
            // for(let i = 0; i < wordArr.length; ++i) {options.push(wordArr[i].explanation);}
            options = Array.from(wordArr, word => word.explanation);
            break;
        case 2:
            question = wordArr[0].explanation;
            // for(let i = 0; i < wordArr.length; ++i) {options.push(wordArr[i].word);}
            options = Array.from(wordArr, word => word.word);
            break;
        case 3:
            const boolVar = Math.random() > 0.5;
            question = boolVar ? wordArr[0].word : wordArr[0].explanation;
            // for(let i = 0; i < wordArr.length; ++i) {options.push(boolVar ? wordArr[i].explanation : wordArr[i].word);}
            options = Array.from(wordArr, word => boolVar ? word.explanation : word.word);
        // break;
    }
    // options[0] is always the correct answer
    return [wordArr[0], question, options];
}
function renderBlockTypeChoice(subtype, source, el, ctx, plugin) {
    const words = new Words(source, ":");
    let [word, question, options] = getRandomQuestionAndOptions(subtype, words, 4);
    let blockEl = el.createDiv({ cls: "vocaview-block" });
    // create "Add to vocabulary book" buttons if current .md file is not itself a vocabulary book
    let addToVocBookButtonsEl = undefined;
    let currentFileIsVocabularyBook = isCurrentFileVocabularyBook(ctx, plugin);
    if (plugin.settings.numOfVocabularyBooks > 0 && !currentFileIsVocabularyBook) {
        addToVocBookButtonsEl = createAddToVocBookButtons(plugin, word);
        blockEl.appendChild(addToVocBookButtonsEl);
    }
    // create question  and accuracy html elements
    let questionAndAccuracyEl = blockEl.createDiv({ cls: "question-and-accuracy" });
    let questionEl = questionAndAccuracyEl.createDiv({
        cls: "question",
        text: question
    });
    let correctlyAnswered = new numberObj(0);
    let totalAnswered = new numberObj(0);
    let accuracyEl = questionAndAccuracyEl.createDiv({
        cls: "accuracy",
        text: ""
    });
    // create option html elements
    let optionsEl = blockEl.createEl("ul", { cls: "options" });
    const numOfOptions = options.length;
    let indexArr = Array.from(Array(numOfOptions).keys());
    shuffle(indexArr);
    let optionElArr = [];
    for (let i = 0; i < indexArr.length; i++) {
        let optionEl = optionsEl.createEl("li", {
            cls: "selectable-item",
            text: options[indexArr[i]]
        });
        // cache option html elements for later use
        optionElArr.push(optionEl);
    }
    let allowSelection = new booleanObj(true);
    for (let optionEl of optionElArr) {
        optionEl.addEventListener("click", () => {
            var _a;
            // forbid multiple selection
            if (!allowSelection.get())
                return;
            allowSelection.clear();
            // validate answer and update accuracy
            const correct = (optionEl.innerText === options[0]);
            totalAnswered.increase();
            if (correct) {
                optionEl.toggleClass("correct", true);
                correctlyAnswered.increase();
            }
            else {
                optionEl.toggleClass("wrong", true);
            }
            accuracyEl.innerText = `${(_a = localedTexts.accuracy[obsidian.moment.locale()]) !== null && _a !== void 0 ? _a : localedTexts.accuracy["en"]}: ${(100 * correctlyAnswered.get() / totalAnswered.get()).toFixed(1)}%`;
            // load next question
            setTimeout(() => {
                var _a;
                optionEl.toggleClass("correct", false);
                optionEl.toggleClass("wrong", false);
                [word, question, options] = getRandomQuestionAndOptions(subtype, words, numOfOptions);
                // create "Add to vocabulary book" buttons if current .md file is not itself a vocabulary book
                if (plugin.settings.numOfVocabularyBooks > 0 && !currentFileIsVocabularyBook) {
                    let newAddToVocBookButtonsEl = createAddToVocBookButtons(plugin, word);
                    if (addToVocBookButtonsEl) {
                        (_a = addToVocBookButtonsEl.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(newAddToVocBookButtonsEl, addToVocBookButtonsEl);
                        addToVocBookButtonsEl = newAddToVocBookButtonsEl; // update the reference. without this line, the buttons will only be updated for the first time
                    }
                }
                // modify the question and options
                questionEl.innerText = question;
                shuffle(indexArr);
                for (let i = 0; i < indexArr.length; i++) {
                    optionElArr[i].innerText = options[indexArr[i]];
                }
                allowSelection.set();
            }, 800);
        });
    }
}
/**
 * Get a random question and answer from the given words
 * @param subtype 1: word -> explanation, 2: explanation -> word, 3: random
 * @param words Words object
 * @returns [word, question, answer] where question is a string equal to word.word or word.explanation
 */
function getRandomQuestionAndAnswer(subtype, words) {
    const word = words.getRandomWord();
    let question, answer;
    switch (subtype) {
        default:
        case 1:
            question = word.word;
            answer = word.explanation;
            break;
        case 2:
            question = word.explanation;
            answer = word.word;
            break;
        case 3:
            const boolVar = Math.random() > 0.5;
            question = boolVar ? word.word : word.explanation;
            answer = boolVar ? word.explanation : word.word;
        // break;
    }
    return [word, question, answer];
}
function renderBlockTypeCard(subtype, source, el, ctx, plugin) {
    var _a, _b;
    const words = new Words(source, ":");
    let blockEl = el.createDiv({ cls: "vocaview-block" });
    let [word, question, answer] = getRandomQuestionAndAnswer(subtype, words);
    // create "Add to vocabulary book" buttons if current .md file is not itself a vocabulary book
    let addToVocBookButtonsEl = undefined;
    let currentFileIsVocabularyBook = isCurrentFileVocabularyBook(ctx, plugin);
    if (plugin.settings.numOfVocabularyBooks > 0 && !currentFileIsVocabularyBook) {
        addToVocBookButtonsEl = createAddToVocBookButtons(plugin, word);
        blockEl.appendChild(addToVocBookButtonsEl);
    }
    let questionAndAnswerEl = blockEl.createDiv({ cls: "question-and-answer" });
    // create question html element
    let questionEl = questionAndAnswerEl.createDiv({
        cls: "question",
        text: question
    });
    // create answer html element
    let answerEl = questionAndAnswerEl.createDiv({ cls: "answer" }).createDiv({
        cls: ["answer-text", "hidden"]
    });
    let answerSpanEl = answerEl.createSpan({ text: answer });
    questionAndAnswerEl.addEventListener("click", () => {
        divToggleHidden(answerEl, undefined);
    });
    let bottomBarEl = blockEl.createDiv({ cls: "bottom-bar" });
    // create placeholder button element
    bottomBarEl.createEl("button", {
        cls: "placeholder-button",
        text: (_a = localedTexts.nextBtn[obsidian.moment.locale()]) !== null && _a !== void 0 ? _a : localedTexts.nextBtn["en"]
    });
    // create spell input html element
    let spellInputEl = bottomBarEl.createEl("input", {
        cls: "spell",
        type: "text",
        attr: { "spellcheck": "false" }
    });
    // check answer
    spellInputEl.addEventListener("keydown", () => {
        setTimeout(() => {
            let correctAnswer = answerSpanEl.textContent;
            let userAnswer = spellInputEl.value;
            if (userAnswer.trim() === "")
                return;
            if (userAnswer.trim() === correctAnswer) {
                spellInputEl.toggleClass("correct", true);
                spellInputEl.toggleClass("wrong", false);
            }
            else {
                spellInputEl.toggleClass("correct", false);
                spellInputEl.toggleClass("wrong", true);
            }
        }, 200);
    });
    // create next button html element
    let nextButtonEl = bottomBarEl.createEl("button", {
        cls: "next-button",
        text: (_b = localedTexts.nextBtn[obsidian.moment.locale()]) !== null && _b !== void 0 ? _b : localedTexts.nextBtn["en"]
    });
    nextButtonEl.addEventListener("click", () => {
        var _a;
        [word, question, answer] = getRandomQuestionAndAnswer(subtype, words);
        // create "Add to vocabulary book" buttons if current .md file is not itself a vocabulary book
        if (plugin.settings.numOfVocabularyBooks > 0 && !currentFileIsVocabularyBook) {
            let newAddToVocBookButtonsEl = createAddToVocBookButtons(plugin, word);
            if (addToVocBookButtonsEl) {
                (_a = addToVocBookButtonsEl.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(newAddToVocBookButtonsEl, addToVocBookButtonsEl);
                addToVocBookButtonsEl = newAddToVocBookButtonsEl; // update the reference. without this line, the buttons will only be updated for the first time
            }
        }
        questionEl.innerText = question;
        answerSpanEl.innerText = answer;
        divSetHidden(answerEl, undefined);
        spellInputEl.toggleClass("correct", false);
        spellInputEl.toggleClass("wrong", false);
        spellInputEl.value = "";
        spellInputEl.focus();
    });
}
function isCurrentFileVocabularyBook(ctx, plugin) {
    return plugin.vocabularyBooks.has(extractNameFromPath(ctx.sourcePath));
}

module.exports = VocabularyView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
